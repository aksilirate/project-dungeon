[gd_scene load_steps=10 format=3 uid="uid://d3gkrp8gigsvb"]

[ext_resource type="ArrayMesh" uid="uid://bk4gy4x3f8tlb" path="res://sword_mesh.res" id="1_pfo1r"]
[ext_resource type="Texture2D" uid="uid://clki5xlvrkxnm" path="res://sword.png" id="2_khi4d"]
[ext_resource type="Script" path="res://SwordMesh.gd" id="3_j5d0v"]

[sub_resource type="Shader" id="Shader_8y1lk"]
code = "shader_type canvas_item;

render_mode unshaded;

#define MAXCOLORS 16

uniform bool enabled = true;
uniform bool dithering = true;
uniform int colors : hint_range(1, MAXCOLORS) = 12;
uniform int dither_size: hint_range(1, 8) = 2;

float dithering_pattern(ivec2 fragcoord) {
	const float pattern[] = {
		0.00, 0.50, 0.10, 0.65, 
		0.75, 0.25, 0.90, 0.35, 
		0.20, 0.70, 0.05, 0.50, 
		0.95, 0.40, 0.80, 0.30
	};
	
	int x = fragcoord.x % 4;
	int y = fragcoord.y % 4;
	
	return pattern[y * 4 + x];
}

float reduce_color(float raw, float dither, int depth) {
	float div = 1.0 / float(depth);
	float val = 0.0;
	int i = 0;

	while (i <= MAXCOLORS)
	{
		if (raw > div * (float(i + 1))) {
			i = i + 1;
			continue;
		}

		if (raw * float(depth) - float(i) <= dither * 0.999)
		{
			val = div * float(i);
		} 
		else
		{
			val = div * float(i + 1);
		}
		return val;

		i = i+1;
	}

	return val;
}

void fragment() {
	vec4 raw = texture(TEXTURE, SCREEN_UV);
	ivec2 uv = ivec2(FRAGCOORD.xy / float(dither_size));

	if (enabled == true){
		float dithering_value = 1.0;
		if (dithering)
		{
			dithering_value = dithering_pattern(uv);
		}
		
		COLOR.r = reduce_color(raw.r, (dithering_value - 0.5) * dithering_value + 0.5, colors - 1);
		COLOR.g = reduce_color(raw.g, (dithering_value - 0.5) * dithering_value + 0.5, colors - 1);
		COLOR.b = reduce_color(raw.b, (dithering_value - 0.5) * dithering_value + 0.5, colors - 1);

	} else {
		COLOR.rgb = raw.rgb;
	}
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ymkvj"]
shader = SubResource("Shader_8y1lk")
shader_parameter/enabled = true
shader_parameter/dithering = true
shader_parameter/colors = 12
shader_parameter/dither_size = 2

[sub_resource type="ProceduralSkyMaterial" id="ProceduralSkyMaterial_82qex"]
sky_horizon_color = Color(0.64625, 0.65575, 0.67075, 1)
ground_horizon_color = Color(0.64625, 0.65575, 0.67075, 1)

[sub_resource type="Sky" id="Sky_fx22j"]
sky_material = SubResource("ProceduralSkyMaterial_82qex")

[sub_resource type="Environment" id="Environment_3emum"]
sky = SubResource("Sky_fx22j")
reflected_light_source = 1

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_4jcy6"]
albedo_texture = ExtResource("2_khi4d")
texture_filter = 0

[node name="Node3D" type="Node3D"]

[node name="SubViewportContainer" type="SubViewportContainer" parent="."]
material = SubResource("ShaderMaterial_ymkvj")
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
stretch = true

[node name="SubViewport" type="SubViewport" parent="SubViewportContainer"]
transparent_bg = true
size = Vector2i(1152, 648)
render_target_update_mode = 4

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="SubViewportContainer/SubViewport"]
transform = Transform3D(-0.866025, -0.433013, 0.25, 0, 0.5, 0.866025, -0.5, 0.75, -0.433013, 0, 0, 0)
shadow_enabled = true

[node name="WorldEnvironment" type="WorldEnvironment" parent="SubViewportContainer/SubViewport"]
environment = SubResource("Environment_3emum")

[node name="SwordMesh" type="MeshInstance3D" parent="SubViewportContainer/SubViewport"]
transform = Transform3D(0.1, 0, 0, 0, 0.1, 0, 0, 0, 0.1, -0.918604, 2.1396, -0.379382)
mesh = ExtResource("1_pfo1r")
skeleton = NodePath("../../..")
surface_material_override/0 = SubResource("StandardMaterial3D_4jcy6")
script = ExtResource("3_j5d0v")

[node name="Camera3D" type="Camera3D" parent="SubViewportContainer/SubViewport"]
transform = Transform3D(-4.37114e-08, 0, 1, 0, 1, 0, -1, 0, -4.37114e-08, 2.83078, 2.63633, -0.884388)
