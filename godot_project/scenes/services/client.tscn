[gd_scene load_steps=10 format=3 uid="uid://d3gkrp8gigsvb"]

[ext_resource type="PackedScene" uid="uid://cfb2y4py5wugl" path="res://scenes/environment/rooms/dungeon_room_0/dungeon_room_0.tscn" id="1_krv7k"]
[ext_resource type="PackedScene" uid="uid://d3hho37n31nkx" path="res://scenes/entities/local_player/local_player.tscn" id="2_l3mvv"]
[ext_resource type="PackedScene" uid="uid://e0yub0jk6xv6" path="res://scenes/environment/dungeon_door/dungeon_door.tscn" id="3_laxny"]
[ext_resource type="PackedScene" uid="uid://bwqcldj3v5ocl" path="res://scenes/environment/rooms/dungeon_room_1/dungeon_room_1.tscn" id="4_lldjw"]

[sub_resource type="Shader" id="Shader_8y1lk"]
code = "shader_type canvas_item;

render_mode unshaded;

#define MAXCOLORS 16

uniform bool enabled = true;
uniform bool dithering = true;
uniform int colors : hint_range(1, MAXCOLORS) = 12;
uniform int dither_size: hint_range(1, 8) = 2;

uniform float vignette_intensity = 0.4;
uniform float vignette_opacity : hint_range(0.0, 1.0) = 0.5;
uniform vec4 vignette_rgb : source_color = vec4(0.0, 0.0, 0.0, 1.0);



float dithering_pattern(ivec2 fragcoord) {
	const float pattern[] = {
		0.00, 0.50, 0.10, 0.65, 
		0.75, 0.25, 0.90, 0.35, 
		0.20, 0.70, 0.05, 0.50, 
		0.95, 0.40, 0.80, 0.30
	};
	
	int x = fragcoord.x % 4;
	int y = fragcoord.y % 4;
	
	return pattern[y * 4 + x];
}

float reduce_color(float raw, float dither, int depth) {
	float div = 1.0 / float(depth);
	float val = 0.0;
	int i = 0;

	while (i <= MAXCOLORS)
	{
		if (raw > div * (float(i + 1))) {
			i = i + 1;
			continue;
		}

		if (raw * float(depth) - float(i) <= dither * 0.999)
		{
			val = div * float(i);
		} 
		else
		{
			val = div * float(i + 1);
		}
		return val;

		i = i+1;
	}

	return val;
}


float vignette(vec2 uv){
	uv *= 1.0 - uv.xy;
	float vignette = uv.x * uv.y * 15.0;
	return pow(vignette, vignette_intensity * vignette_opacity);
}


void fragment() {
	vec4 raw = texture(TEXTURE, SCREEN_UV);
	ivec2 uv = ivec2(FRAGCOORD.xy / float(dither_size));
	
	raw.rgba = mix(vignette_rgb, raw.rgba, vignette(UV));
	
	if (enabled == true){
		float dithering_value = 1.0;
		if (dithering)
		{
			dithering_value = dithering_pattern(uv);
		}
		
		COLOR.r = reduce_color(raw.r, (dithering_value - 0.5) * dithering_value + 0.5, colors - 1);
		COLOR.g = reduce_color(raw.g, (dithering_value - 0.5) * dithering_value + 0.5, colors - 1);
		COLOR.b = reduce_color(raw.b, (dithering_value - 0.5) * dithering_value + 0.5, colors - 1);

	} else {
		COLOR.rgb = raw.rgb;
	}
}

"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ymkvj"]
shader = SubResource("Shader_8y1lk")
shader_parameter/enabled = true
shader_parameter/dithering = true
shader_parameter/colors = 12
shader_parameter/dither_size = 1
shader_parameter/vignette_intensity = 0.3
shader_parameter/vignette_opacity = 1.0
shader_parameter/vignette_rgb = Color(0, 0.0235294, 0, 1)

[sub_resource type="ProceduralSkyMaterial" id="ProceduralSkyMaterial_82qex"]
sky_horizon_color = Color(0.64625, 0.65575, 0.67075, 1)
ground_horizon_color = Color(0.64625, 0.65575, 0.67075, 1)

[sub_resource type="Sky" id="Sky_fx22j"]
sky_material = SubResource("ProceduralSkyMaterial_82qex")

[sub_resource type="Environment" id="Environment_3emum"]
sky = SubResource("Sky_fx22j")
tonemap_mode = 2
fog_light_energy = 0.0
fog_density = 0.0
fog_sky_affect = 0.0

[node name="Client" type="Node"]

[node name="CanvasLayer" type="CanvasLayer" parent="."]

[node name="SubViewportContainer" type="SubViewportContainer" parent="CanvasLayer"]
material = SubResource("ShaderMaterial_ymkvj")
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
scale = Vector2(0.998912, 0.993428)
stretch = true

[node name="SubViewport" type="SubViewport" parent="CanvasLayer/SubViewportContainer"]
transparent_bg = true
handle_input_locally = false
size = Vector2i(1152, 648)
render_target_update_mode = 4

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="CanvasLayer/SubViewportContainer/SubViewport"]
transform = Transform3D(-0.866025, -0.433013, 0.25, 0, 0.5, 0.866025, -0.5, 0.75, -0.433013, 0, 0, 0)
shadow_enabled = true
directional_shadow_mode = 0

[node name="WorldEnvironment" type="WorldEnvironment" parent="CanvasLayer/SubViewportContainer/SubViewport"]
environment = SubResource("Environment_3emum")

[node name="DungeonRoom0" parent="CanvasLayer/SubViewportContainer/SubViewport" instance=ExtResource("1_krv7k")]
transform = Transform3D(-4.37114e-08, 0, 1, 0, 1, 0, -1, 0, -4.37114e-08, 0, 0, -1)

[node name="LocalPlayer" parent="CanvasLayer/SubViewportContainer/SubViewport" instance=ExtResource("2_l3mvv")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.791486, 1.28334)

[node name="DungeonDoor" parent="CanvasLayer/SubViewportContainer/SubViewport" instance=ExtResource("3_laxny")]
transform = Transform3D(-4.37114e-08, 0, 1, 0, 1, 0, -1, 0, -4.37114e-08, 3, 0.5, -1)

[node name="DungeonRoom1" parent="CanvasLayer/SubViewportContainer/SubViewport" instance=ExtResource("4_lldjw")]
transform = Transform3D(-4.37114e-08, 0, -1, 0, 1, 0, 1, 0, -4.37114e-08, 6, 0, -1)

[node name="DungeonRoom2" parent="CanvasLayer/SubViewportContainer/SubViewport" instance=ExtResource("4_lldjw")]
transform = Transform3D(-4.37114e-08, 0, -1, 0, 1, 0, 1, 0, -4.37114e-08, 12, 0, -1)

[node name="DungeonRoom3" parent="CanvasLayer/SubViewportContainer/SubViewport" instance=ExtResource("1_krv7k")]
transform = Transform3D(-4.37114e-08, 0, -1, 0, 1, 0, 1, 0, -4.37114e-08, 18, 0, -1)

[node name="CanvasGroup" type="CanvasGroup" parent="CanvasLayer"]
material = SubResource("ShaderMaterial_ymkvj")
